---
description:
globs:
alwaysApply: true
---
# Service Layer

## Template
```typescript
import { withTransaction } from '@services/common';
import * as FeatureModel from '@models/Feature.model';
import { NotFoundError, ValidationError } from '@js/errors';

interface ServiceParams {
  userId: number;
  // other params
}

// Always use object-based parameters for better maintainability and clarity
interface GetUserParams {
  id: number;
  includeDeleted?: boolean;
  withRelations?: string[];
}

const serviceImpl = async ({ id, includeDeleted = false, withRelations = [] }: GetUserParams) => {
  // Business logic implementation
  const result = await FeatureModel.findOne({
    where: { id },
    paranoid: !includeDeleted,
    include: withRelations,
  });

  if (!result) {
    throw new NotFoundError({ message: 'Resource not found' });
  }

  return result;
};

export const serviceName = withTransaction(serviceImpl);
```

## Rules
1. Use withTransaction for data modifications
2. Always use object-based parameters with interfaces:
   ```typescript
   // ❌ Bad
   const getUser = (id: number, includeDeleted: boolean) => { ... }

   // ✅ Good
   interface GetUserParams {
     id: number;
     includeDeleted?: boolean;
   }
   const getUser = ({ id, includeDeleted = false }: GetUserParams) => { ... }
   ```
3. Define clear TypeScript interfaces for parameters
4. Use default values in destructured parameters when appropriate
5. Implement core business logic
6. Handle model interactions
7. Use proper error types from @js/errors
8. Services can call other services
9. Use proper error handling with custom error classes
10. Document complex business logic
11. Use transactions for multi-step operations
12. Validate business rules before data operations
