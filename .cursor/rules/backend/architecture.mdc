---
description:
globs:
alwaysApply: false
---
# Architecture Overview

The backend follows a strict route-controller-service pattern:
- Routes handle request routing and middleware application
- Controllers handle request validation and response formatting
- Services contain business logic and data operations

## File Structure

```
src/
├── routes/
│   ├── {feature}.route.ts
│   └── {feature}/
│       └── {sub-feature}.route.ts
├── controllers/
│   ├── {feature}.controller.ts
│   └── {feature}/
│       └── {action}.ts
└── services/
    ├── {feature}.service.ts
    └── {feature}/
        └── {action}.service.ts
```

## Naming Conventions
- Files: kebab-case (e.g., `user-settings.ts`)
- Classes: PascalCase (e.g., `UserSettings`)
- Functions/variables: camelCase (e.g., `getUserSettings`)
- Constants: UPPER_SNAKE_CASE (e.g., `DEFAULT_LIMIT`)
- Types/Interfaces: PascalCase (e.g., `UserSettingsParams`)
