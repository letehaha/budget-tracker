# Budget Tracker - Product Requirements Document

<context>
# Overview
Budget Tracker is a comprehensive personal finance management application that helps users track their income, expenses, accounts, and investments. The application follows a modern full-stack architecture with Vue.js frontend, Node.js/Express backend, PostgreSQL database, and Docker containerization. Users can manage multiple accounts across different categories (credit cards, savings, investments, crypto), categorize transactions, create budgets, and gain insights into their financial health.

# Core Features
**Account Management:** Support for multiple account types including credit cards, savings accounts, investment accounts, crypto wallets, cash accounts, and loans. Each account tracks balances, credit limits, and currency associations.

**Transaction Management:** Comprehensive transaction tracking with support for income, expenses, transfers between accounts, refunds, and investment transactions. Transactions are categorized and can be filtered by various criteria.

**Category System:** Flexible categorization system for organizing transactions with default categories (Food & Drinks, Shopping, Housing, Transportation, etc.) and support for custom categories.

**Budget Management:** Budget creation and tracking with automatic transaction inclusion, date ranges, and spending limits. Budgets can track specific categories or overall spending.

**Multi-Currency Support:** Full support for multiple currencies with exchange rate management and automatic conversion between user currencies and system currencies.

**Investment Tracking:** Complete investment portfolio management including securities tracking, investment transactions (buy/sell/dividend), holdings management, and pricing data.

**Bank Integrations:** Integration with external banking systems (Monobank) for automatic transaction import and account synchronization.

**Crypto Integration:** Integration with crypto exchanges (Binance) for automatic crypto transaction and balance tracking.

# User Experience
**Primary Personas:**
- Personal finance managers who want detailed control over their budget tracking
- Investment-focused users managing both traditional and crypto portfolios
- Multi-currency users with international accounts and transactions

**Key User Flows:**
- Onboarding: User registration, currency setup, initial account creation
- Daily usage: Adding transactions, checking balances, reviewing recent activity
- Monthly planning: Budget creation, expense analysis, financial goal tracking
- Investment management: Portfolio tracking, transaction recording, performance analysis

**UI/UX Considerations:**
- Mobile-first responsive design with dashboard layout
- Intuitive transaction entry with smart defaults and categorization
- Visual budget tracking with progress indicators
- Real-time balance updates and transaction synchronization
</context>

<PRD>
# Technical Architecture
**Frontend:** Vue.js 3 with TypeScript, Tailwind CSS, Pinia state management, Vue Router, and comprehensive component library including forms, dialogs, and data visualization components.

**Backend:** Node.js with Express.js, TypeScript, Sequelize ORM for PostgreSQL, passport.js for authentication, and comprehensive API layer following RESTful principles.

**Database:** PostgreSQL with complex relational schema supporting users, accounts, transactions, categories, budgets, investments, currencies, and external integrations.

**Infrastructure:** Docker containerization for development and production environments, with separate containers for frontend, backend, and database services.

**Testing:** Comprehensive testing strategy with Jest for unit tests, E2E testing with Cypress, and integration tests using actual API endpoints.

**External Integrations:** Monobank API for banking data, Binance API for crypto data, exchange rate APIs for currency conversion.

# Development Roadmap

**Phase 1: Core Platform Stabilization**
- Refactor existing controllers to follow consistent patterns
- Complete migration from legacy controller structure to new standardized approach
- Implement comprehensive error handling and validation
- Optimize database queries and implement proper indexing
- Enhance security measures and authentication flows

**Phase 2: Advanced Financial Features**
- Enhanced budget management with predictive analytics
- Advanced transaction search and filtering capabilities
- Financial goal setting and tracking system
- Recurring transaction automation
- Enhanced reporting and analytics dashboard

**Phase 3: Investment Platform Enhancement**
- Real-time investment portfolio tracking
- Advanced investment analytics and performance metrics
- Support for additional investment types (bonds, mutual funds, ETFs)
- Investment goal planning and recommendation engine
- Tax reporting and capital gains tracking

**Phase 4: Integration and Automation**
- Additional bank integrations beyond Monobank
- Open Banking API implementations
- Automated transaction categorization using AI/ML
- Smart budgeting recommendations
- Enhanced crypto exchange integrations

**Phase 5: Advanced User Experience**
- Mobile application development
- Offline capability and sync
- Advanced data visualization and charts
- Export capabilities (PDF reports, CSV data)
- Multi-user support for family/shared accounts

# Logical Dependency Chain
**Foundation First:**
- Database schema optimization and migration completion
- Controller standardization following established patterns
- API consistency and documentation
- Authentication and security hardening

**Core Functionality:**
- Transaction management reliability and performance
- Account balance accuracy and real-time updates
- Category management and transaction categorization
- Basic budget creation and tracking

**Advanced Features:**
- Investment tracking accuracy and real-time data
- External integrations stability and error handling
- Advanced filtering and search capabilities
- Reporting and analytics foundation

**User Experience Enhancement:**
- Frontend performance optimization
- Mobile responsiveness and PWA features
- Advanced UI components and interactions
- Data visualization and dashboard improvements

# Risks and Mitigations
**Technical Challenges:**
- Database performance with large transaction volumes - implement proper indexing and query optimization
- Real-time data synchronization from external APIs - implement robust retry mechanisms and queue systems
- Multi-currency calculation accuracy - implement precise decimal handling and validation

**Integration Risks:**
- External API dependencies (banks, crypto exchanges) - implement fallback mechanisms and graceful degradation
- Rate limiting and API quota management - implement intelligent caching and request batching
- Data consistency across multiple data sources - implement comprehensive validation and reconciliation

**Scalability Concerns:**
- User base growth and database scaling - plan for horizontal scaling and data archiving strategies
- API performance under load - implement caching layers and optimization
- Frontend bundle size and performance - implement code splitting and lazy loading

# Appendix
**Current Technology Stack:**
- Frontend: Vue.js 3, TypeScript, Tailwind CSS, Pinia, Vite
- Backend: Node.js, Express.js, TypeScript, Sequelize, PostgreSQL
- Testing: Jest, Cypress, custom test helpers
- Infrastructure: Docker, Docker Compose
- External APIs: Monobank, Binance, Exchange Rate APIs

**Key Database Models:**
- Users, Accounts, Transactions, Categories, Budgets
- Currencies, ExchangeRates, UserExchangeRates
- InvestmentTransactions, Securities, Holdings
- External integration models for banks and crypto exchanges

**Existing Features to Maintain:**
- Multi-account management across different account types
- Comprehensive transaction tracking and categorization
- Budget creation and management
- Investment portfolio tracking
- Bank and crypto exchange integrations
- Multi-currency support with exchange rate management
