name: Lint, Test and Build

on:
  push:
    branches: [main]
  pull_request:
  # enable manual triggers
  workflow_dispatch:

jobs:
  prepare-dependencies:
    name: Prepare local deps
    runs-on: ubuntu-latest
    outputs:
      frontend-only: ${{ steps.set-outputs.outputs.frontend_only }}
      backend-only: ${{ steps.set-outputs.outputs.backend_only }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for file changes
      - id: prepare-env
        uses: ./.github/actions/prepare-local-env
      - name: Install dependencies
        if: steps.prepare-env.outputs.cache-hit != 'true'
        run: npm ci

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          predicate-quantifier: 'every'
          filters: |
            frontend:
              - 'packages/frontend/**'
            backend:
              - 'packages/backend/**'
            common:
              - '**'
              - '!packages/frontend/**'
              - '!packages/backend/**'

      # Debug the outputs from paths-filter
      - name: Debug paths-filter outputs
        run: |
          echo "Frontend changes detected: ${{ steps.filter.outputs.frontend }}"
          echo "Backend changes detected: ${{ steps.filter.outputs.backend }}"
          echo "Common changes detected: ${{ steps.filter.outputs.common }}"

          # List all changed files for debugging
          echo "Changed files:"
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} || echo "Could not get diff"

      # Set outputs for frontend-only and backend-only changes
      - name: Set outputs
        id: set-outputs
        run: |
          # Only frontend changes (no backend or common changes)
          if [[ "${{ steps.filter.outputs.frontend }}" == "true" && "${{ steps.filter.outputs.backend }}" == "false" && "${{ steps.filter.outputs.common }}" == "false" ]]; then
            echo "frontend_only=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_only=false" >> $GITHUB_OUTPUT
          fi

          # Only backend changes (no frontend or common changes)
          if [[ "${{ steps.filter.outputs.backend }}" == "true" && "${{ steps.filter.outputs.frontend }}" == "false" && "${{ steps.filter.outputs.common }}" == "false" ]]; then
            echo "backend_only=true" >> $GITHUB_OUTPUT
          else
            echo "backend_only=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug final outputs
        run: |
          echo "Frontend only: ${{ steps.set-outputs.outputs.frontend_only }}"
          echo "Backend only: ${{ steps.set-outputs.outputs.backend_only }}"

  frontend:
    name: Frontend tasks
    needs: prepare-dependencies
    runs-on: ubuntu-latest
    # Run if frontend files changed OR common files changed
    if: needs.prepare-dependencies.outputs.backend-only != 'true'
    strategy:
      matrix:
        task: [lint, test, build, knip]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-local-env
      - name: Run ${{ matrix.task }}
        run: npm run ${{ matrix.task }} -w packages/frontend

  fontend-docker-build:
    name: Build frontend Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: frontend-docker-build
        uses: ./.github/actions/frontend-docker-build
        with:
          api-base-url: ${{ secrets.API_BASE_URL }}
          vue-app-api-ver: ${{ secrets.VUE_APP_API_VER }}
          docker-hub-username: ${{ secrets.DOCKER_HUB_USERNAME }}
          docker-hub-access-token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Image digest
        run: echo ${{ steps.frontend-docker-build.outputs.docker-build-digest }}

  backend:
    name: Backend tasks
    needs: prepare-dependencies
    runs-on: ubuntu-latest
    # Run if backend files changed OR common files changed
    if: needs.prepare-dependencies.outputs.frontend-only != 'true'
    strategy:
      matrix:
        task: [lint, 'test']
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-local-env
      - name: Make backend env file
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_APPLICATION_HOST: 127.0.0.1
          envkey_APPLICATION_PORT: 8081
          envkey_APPLICATION_JWT_SECRET: test-jwt
          # docker/test/backend/docker-compose.yml DB's service name
          envkey_APPLICATION_DB_HOST: test-db
          envkey_APPLICATION_DB_USERNAME: test
          envkey_APPLICATION_DB_PASSWORD: test
          envkey_APPLICATION_DB_DATABASE: budget-tracker_test
          envkey_APPLICATION_DB_PORT: 5432
          envkey_APPLICATION_DB_DIALECT: postgres
          # docker/test/backend/docker-compose.yml redis' service name
          envkey_APPLICATION_REDIS_HOST: test-redis
          # TODO: temporary set to 1 due to issues with migrations with +1 worker
          envkey_JEST_WORKERS_AMOUNT: 1
          envkey_SHOW_LOGS_IN_TESTS: false
          file_name: .env.test
          fail_on_empty: true # fail if any env variable is empty
      - name: Run ${{ matrix.task }}
        run: npm run ${{ matrix.task }} -w packages/backend

  backend-docker-build:
    name: Build backend Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: backend-docker-build
        uses: ./.github/actions/backend-docker-build
        with:
          docker-hub-username: ${{ secrets.DOCKER_HUB_USERNAME }}
          docker-hub-access-token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          push: 'false'
      - name: Image digest
        run: echo ${{ steps.backend-docker-build.outputs.docker-build-digest }}
